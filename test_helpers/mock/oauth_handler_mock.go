// Code generated by MockGen. DO NOT EDIT.
// Source: oauth_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "my-tracking-list-backend/core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOauthHandler is a mock of OauthHandler interface.
type MockOauthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOauthHandlerMockRecorder
}

// MockOauthHandlerMockRecorder is the mock recorder for MockOauthHandler.
type MockOauthHandlerMockRecorder struct {
	mock *MockOauthHandler
}

// NewMockOauthHandler creates a new mock instance.
func NewMockOauthHandler(ctrl *gomock.Controller) *MockOauthHandler {
	mock := &MockOauthHandler{ctrl: ctrl}
	mock.recorder = &MockOauthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthHandler) EXPECT() *MockOauthHandlerMockRecorder {
	return m.recorder
}

// DecodeGoogleToken mocks base method.
func (m *MockOauthHandler) DecodeGoogleToken(ctx context.Context, token string) (domain.GoogleToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeGoogleToken", ctx, token)
	ret0, _ := ret[0].(domain.GoogleToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeGoogleToken indicates an expected call of DecodeGoogleToken.
func (mr *MockOauthHandlerMockRecorder) DecodeGoogleToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeGoogleToken", reflect.TypeOf((*MockOauthHandler)(nil).DecodeGoogleToken), ctx, token)
}
